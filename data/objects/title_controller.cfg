{
	id: "title_controller",
	is_strict: true,
	hidden_in_game: true,

	prototype: ["title_controller_base"],

	properties: {
		play_solo_game: "def() ->commands
		execute(me, [

			//This is the message we use to setup the game.
			//This message gets handled by the server in
			//class tbs_game's create() function to construct
			//the actual game state. Any custom arguments to the
			//game / state / etc can be included here.
			let msg = {
				type: 'create_game',
				users: [{
					//maybe one day we will give the player a name when
					//setting up a game but for now they are just 'Player'.
					user: 'Player',
					session_id: 1,
				}],
			};

			//Create a machine-local server and send it the request
			let client = tbs_internal_client();
			let request = tbs_blocking_request(client, msg);

			//We send the request to start the game and also start
			//doing a graphical transition effect at the same time.
			//These calls will block until both are complete.
			[
				request.block(),

				//TODO: add a cool transition effect when going into a game.
				//transition_effect_blocking('zoom_in'),
			];

			if((not request.response is map) or (map<-request.response).type != 'game_created', [
				//TODO: Creating a local game should rarely fail
				//but if it does we should have better error handling here.
				debug(['ERROR CREATING GAME', request.response]),
				cancel(),
			]);

			teleport('game.cfg', '', '', object_playable('game_controller', 0, 0, 1, {
				_mm_client_state: _mm_client_state,
				session_id: 1,

				//What to do when the game is over, for now just
				//teleport back to the titlescreen.
				return_from_game: def(bool result, null|class game_state game) ->commands
					teleport('titlescreen.cfg')
				
			})),
		])
		",

		queue_for_multiplayer_game: "def() ->commands [
			send_matchmaking_request({ type: 'coop' }),
			map(_widgets, remove_object(value)),
			set(_widgets, []),

			spawn('label', {
				mid_x: level.dimensions[2]/2,
				mid_y: level.dimensions[3]/2 + 40,
				_text: ['Queued'],
				_halign: 'left',
				_font_size: lib.gui.py(26),
				zorder: me.zorder+10,
			}, [
				add(_widgets, [child]),
				set(me._battle_pending_label, child),
			]),

			spawn('button_controller', {
				text: 'Cancel',
				mid_x: level.dimensions[2]/2,
				mid_y: level.dimensions[3]/2,
				_font_size: 16,
				button_width: 160,
				button_height: 22,
				on_click: cancel_play_game,
			}, [
				add(_widgets, [child]),
			]),
			
		]",

		cancel_play_game: "def() ->commands
		execute(me, [
			send_cancel_matchmaking_request(),
			_present_ui(),
		])
		",

		join_game: "def(string host, int port, int|null session_id_override=null) ->commands execute(me, [
			debug(['JOIN GAME', host, port, session_id_override]),
			map(level.chars, remove_object(value)),
			add_object(ctrl)
			where ctrl = object_playable('game_controller', 0, 0, 1, {
				game_server_address: host,
				game_server_port: port,
				session_id: if(session_id_override != null, session_id_override, _mm_client_state.session_id),
				_mm_client_state: _mm_client_state,
				return_from_game: me.return_from_game,
			}),
		])
		",

		_battle_pending_label: { type: "null|obj label" },

		_widgets: { type: "[custom_obj]", default: [] },

		_present_ui: "def() ->commands
		[
			map(_widgets, remove_object(value)),
			set(_widgets, []),

			spawn('button_controller', {
				text: 'Play Solo',
				mid_x: level.dimensions[2]/2,
				mid_y: level.dimensions[3]/2,
				_font_size: 16,
				button_width: 160,
				button_height: 22,
				on_click: play_solo_game,
			}, [
				add(_widgets, [child]),
			]),

			spawn('button_controller', {
				text: 'Multiplayer',
				mid_x: level.dimensions[2]/2,
				mid_y: level.dimensions[3]/2 + 40,
				_font_size: 16,
				button_width: 160,
				button_height: 22,
				on_click: queue_for_multiplayer_game,
			}, [
				add(_widgets, [child]),
			]),

		]
		",
	},

	events: {
		process: "
			if(_battle_pending_label and cycle%10 = 0,
				_battle_pending_label.set_text(['Queued' + fold(map(range((cycle/10)%4), '.'), a+b, '')])
			)
		",
	},
}
